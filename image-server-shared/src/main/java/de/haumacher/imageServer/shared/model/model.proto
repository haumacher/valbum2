package de.haumacher.imageServer.shared.model;

option NoBinary;
option NoReflection;
option NoListener;

/** Base class for a resource being displayed as view in a photo album. */
abstract message Resource {

}

/** {@link Resource} representing a directory. */
abstract message FolderResource extends Resource {

	/** The path where the {@link Resource} is located on the server relative to it's base directory */
	transient string path;

}

/** {@link Resource} describing a collection of {@link AlbumPart}s. */
message AlbumInfo extends FolderResource {
	/** The title of this album. */
	string title;
	
	/** The subtitle of this album. */
	string subTitle;
	
	/** Description of the image used to display this whole album in a listing. */
	ThumbnailInfo indexPicture;

	/** The list of images in this album. */
	repeated AlbumPart parts;
	
	/** All {@link ImagePart}s indexed by their {@link ImagePart#name}. */
	transient map<string, ImagePart> imageByName;
	
	/**
	 * The minimum {@link ImagePart#rating} of an {@link ImagePart} to be displayed.
	 * 
	 * <p>The value is set by the UI to remember the current display settings of an {@link AlbumInfo} while browsing its contents</p>
	 */
	transient int minRating;
}

/** Base class for contents of an {@link AlbumInfo}. */
abstract message AlbumPart extends Resource {
	/** The {@link AlbumInfo}, this one is part of. */
	transient AlbumInfo owner;
}

/** A heading row separating images in an album. */
message Heading extends AlbumPart {

	/** The text to display. */
	string text;

}

/** Part of an album that can be represented as an image. */
abstract message AbstractImage extends AlbumPart {
	/** The previous image in the {@link #owner}. */
	transient AbstractImage previous;
	
	/** The next image in the {@link #owner}. */
	transient AbstractImage next;
	
	/** The first image of the {@link #owner}. */
	transient AbstractImage home;
	
	/** The last image of the {@link #owner}. */
	transient AbstractImage end;
}

/** A group of multiple images showing the same content. */
message ImageGroup extends AbstractImage {

	/** The index of the {@link ImagePart} in {@link #images} of the image that should be displayed when displaying this {@link ImageGroup} in an album. */
	int representative;

	/** List of images that all show the same content. Only the image with  in this album. */
	repeated ImagePart images;

}

/** {@link Resource} describing a single image or video file. */
message ImagePart extends AbstractImage {

	/** Kind of image. */
	enum Kind {
		/** A JPEG image. */
		IMAGE;
		
		/** 
		 * A mp4 video. 
		 * 
		 * <p>For historical reason, this kind is named "video" and not "mp4".</p> 
		 */
		VIDEO;
		
		/** A quicktime video. */
		QUICKTIME;
	}

	/** The kind of this {@link ImagePart}. */
	Kind kind;
	
	/** The image (file) name. */
	string name;
	
	/** The last modification date of the image in milliseconds since epoch. */
	long date;
	
	/** The width of the original image in pixels. */
	int width;
	
	/** The height of the original image in pixels. */
	int height;
	
	/** A transformation applied to the image (in addition to the transformation encoded in the image itself). */
	Orientation orientation;
	
	/** A rating of this image from -2 to 2. */
	int rating;
	
	/** A privacy level from 0 to 2. */
	int privacy;
	
	/** A comment describing what this image contains. */
	string comment;
	
	/** The {@link ImageGroup}, this {@link ImagePart} is part of, or <code>null</code>, if this {@link ImagePart} is not part of a group. */
	transient ImageGroup group;
}

/**
 * Values of a JPEG orientation tag.
 * 
 * <pre>
 *   1        2       3      4         5            6           7          8
 * 
 * 888888  888888      88  88      8888888888  88                  88  8888888888
 * 88          88      88  88      88  88      88  88          88  88      88  88
 * 8888      8888    8888  8888    88          8888888888  8888888888          88
 * 88          88      88  88
 * 88          88  888888  888888
 * </pre>
 * 
 * @see "http://sylvana.net/jpegcrop/exif_orientation.html"
 */
enum Orientation {
	/**
	 * No transformation, use raw image data from top to bottom and left to right.
	 *
	 * <pre>
	 * Value	0th Row		0th Column
	 * 1		top			left side
	 * </pre>   
	 */
	IDENTITY;
	
	/**
	 * <pre>
	 * Value: 2
	 * 0th Row: top
	 * 0th Column: right side
	 * </pre>
	 */
	FLIP_H;
	
	/**
	 * <pre>
	 * Value: 3 
	 * 0th Row: bottom
	 * 0th Column: right side
	 * </pre>
	 */
	ROT_180;
	
	/**
	 * <pre>
	 * Value: 4
	 * 0th Row: bottom 
	 * 0th Column: left side
	 * </pre>
	 */
	FLIP_V;
	
	/**
	 * <pre>
	 * Value: 5
	 * 0th Row: left side
	 * 0th Column: top
	 * </pre>
	 */
	ROT_L_FLIP_V;

	/**
	 * <pre>
	 * Value: 6
	 * 0th Row: right side
	 * 0th Column: top
	 * </pre>
	 */
	ROT_L;

	/**
	 * <pre>
	 * Value: 7
	 * 0th Row: right side
	 * 0th Column: bottom
	 * </pre>
	 */
	ROT_L_FLIP_H;
	
	/**
	 * <pre>
	 * Value: 8
	 * 0th Row: left side
	 * 0th Column: bottom
	 * </pre>
	 */
	ROT_R;
}

/** {@link Resource} describing collection {@link FolderInfo}s found in a directory. */
message ListingInfo extends FolderResource {
	/** The title to display for this {@link ListingInfo}. */
	string title;
	
	/** Description of the folders within this {@link ListingInfo}. */
	repeated FolderInfo folders;
}

/** Part of a {@link ListingInfo} describing a reference to a single album directory. */
message FolderInfo {
	/** The directory name of this {@link FolderInfo}. */
	string name;
	
	/** The title of the {@link AlbumInfo} referenced by this {@link FolderInfo}. */
	string title;
	
	/** The subtitle of the {@link AlbumInfo} referenced by this {@link FolderInfo}. */
	string subTitle;
	
	/** The index picture of the {@link AlbumInfo} referenced by this {@link FolderInfo}. */
	ThumbnailInfo indexPicture;
}

/** Part of a {@link FolderInfo} describing the thumbnail image for displaying this folder in a {@link ListingInfo}. */
message ThumbnailInfo {
	/** Name of the image to use as thumbnail. */
	string image;
	
	/** The factor to scale the original image for producing the thumbnail image. */
	double scale;
	
	/** The translation in X to apply to the the original image for producing the thumbnail image. */
	double tx;
	
	/** The translation in Y to apply to the the original image for producing the thumbnail image. */
	double ty;
}

/** {@link Resource} that produced a server-side error while loading. */
message ErrorInfo extends Resource {
	/** The error message. */
	string `message`;
}

